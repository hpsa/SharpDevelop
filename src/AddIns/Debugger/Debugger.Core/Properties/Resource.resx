<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentsCantBeUsedForAField" xml:space="preserve">
    <value>Arguments can not be used for a field</value>
  </data>
  <data name="BadReference" xml:space="preserve">
    <value>Bad reference</value>
  </data>
  <data name="CantAssign" xml:space="preserve">
    <value>Can not assign {0} to {1}</value>
  </data>
  <data name="CantBeSet" xml:space="preserve">
    <value>"{0}" can not be set</value>
  </data>
  <data name="CantCast" xml:space="preserve">
    <value>Can not cast {0} to {1}</value>
  </data>
  <data name="CantEvaluateAfterStackOverflow" xml:space="preserve">
    <value>Can not evaluate after stack overflow</value>
  </data>
  <data name="CantEvaluateObjectNotProperType" xml:space="preserve">
    <value>Can not evaluate because the object is not of proper type.   Expected: {0}  Seen: {1}</value>
  </data>
  <data name="CantEvaluateOptimizedCode" xml:space="preserve">
    <value>Can not evaluate in optimized code</value>
  </data>
  <data name="CantEvaluateProcessHasNoManagedStack" xml:space="preserve">
    <value>Can not evaluate because the process has no managed stack frames</value>
  </data>
  <data name="CantGetValueOfField" xml:space="preserve">
    <value>Can not get value of field</value>
  </data>
  <data name="CantImplicitelyCast" xml:space="preserve">
    <value>Can not implicitely cast {0} to {1}</value>
  </data>
  <data name="CantResolve" xml:space="preserve">
    <value>Can not resolve {0}</value>
  </data>
  <data name="CantuseTheBinaryOperatorOnTypes" xml:space="preserve">
    <value>Can not use the binary operator {0} on types {1} and {2}</value>
  </data>
  <data name="CantUseTheUnaryOperatorOnType" xml:space="preserve">
    <value>Can not use the unary operator {0} on type {1}</value>
  </data>
  <data name="CodeMustBeExpression" xml:space="preserve">
    <value>Code must be expression</value>
  </data>
  <data name="CodeMustBeExpressionOrStatement" xml:space="preserve">
    <value>Code must be expression or statement</value>
  </data>
  <data name="ConstructorNotFound" xml:space="preserve">
    <value>Constructor not found</value>
  </data>
  <data name="Evaluating" xml:space="preserve">
    <value>Evaluating...</value>
  </data>
  <data name="FuncEvalcantWork" xml:space="preserve">
    <value>Func eval cannot work. Bad starting point.</value>
  </data>
  <data name="FunctionDoestHaveILCode" xml:space="preserve">
    <value>Function does not have IL code</value>
  </data>
  <data name="GivenIndicesAreOutOfRangeOfTheArray" xml:space="preserve">
    <value>Given indices are out of range of the array</value>
  </data>
  <data name="GivenIndiciesdotHaveSameDimensionAsArray" xml:space="preserve">
    <value>Given indicies do not have the same dimension as array.</value>
  </data>
  <data name="IdentifierNotFound" xml:space="preserve">
    <value>Identifier {0} not found in this context</value>
  </data>
  <data name="IncorrectInitializerLength" xml:space="preserve">
    <value>Incorrect initializer length</value>
  </data>
  <data name="IncorrectParameterCount" xml:space="preserve">
    <value>Incorrect parameter count</value>
  </data>
  <data name="IncorrectParameterType" xml:space="preserve">
    <value>Incorrect parameter type for '{0}'. Excpeted {1}, seen {2}</value>
  </data>
  <data name="IndexWasOutsideTheBoundsOfTheArray" xml:space="preserve">
    <value>Index was outside the bounds of the array.</value>
  </data>
  <data name="InncorrectParameterType" xml:space="preserve">
    <value>Inncorrect parameter type</value>
  </data>
  <data name="IntegerExpected" xml:space="preserve">
    <value>Integer expected</value>
  </data>
  <data name="InvalidContextOrThread" xml:space="preserve">
    <value>Invalid context or thread</value>
  </data>
  <data name="InvalidParameterCount" xml:space="preserve">
    <value>Invalid parameter count</value>
  </data>
  <data name="IsStaticMethod" xml:space="preserve">
    <value>{0} is static method and does not have "this"</value>
  </data>
  <data name="MemberNotFound" xml:space="preserve">
    <value>Member "{0}" not found</value>
  </data>
  <data name="MemberReferenceExpected" xml:space="preserve">
    <value>Member reference expected for method invocation</value>
  </data>
  <data name="MethodNotFound" xml:space="preserve">
    <value>Method {0} not found</value>
  </data>
  <data name="MoreThenOneApplicableOverloadFound" xml:space="preserve">
    <value>More then one applicable overload found: {0}</value>
  </data>
  <data name="MultiDimensionalArraysAretSuppored" xml:space="preserve">
    <value>Multi-dimensional arrays are not suppored</value>
  </data>
  <data name="NoApplicableOverloadFound" xml:space="preserve">
    <value>No applicable overload found</value>
  </data>
  <data name="NoCurrentException" xml:space="preserve">
    <value>No current exception</value>
  </data>
  <data name="NoSuitableThreadForEvaluation" xml:space="preserve">
    <value>No suitable thread for evaluation</value>
  </data>
  <data name="NotAvailableInTheCurrentState" xml:space="preserve">
    <value>Not available in the current state</value>
  </data>
  <data name="NullReference" xml:space="preserve">
    <value>Null reference</value>
  </data>
  <data name="ObjectInitializersNotSupported" xml:space="preserve">
    <value>Object initializers not supported</value>
  </data>
  <data name="ObjectInWrongAppDomain" xml:space="preserve">
    <value>Object is in wrong AppDomain</value>
  </data>
  <data name="ObjectIstOfType" xml:space="preserve">
    <value>Object is not of type {0}</value>
  </data>
  <data name="ObjMustBeNull" xml:space="preserve">
    <value>'obj' must be null for constructor call</value>
  </data>
  <data name="Overflow" xml:space="preserve">
    <value>Overflow</value>
  </data>
  <data name="PrimitiveValueExpected" xml:space="preserve">
    <value>Primitive value expected</value>
  </data>
  <data name="ProcessExited" xml:space="preserve">
    <value>Process exited</value>
  </data>
  <data name="PropertyDoestHaveAGetMethod" xml:space="preserve">
    <value>Property does not have a get method</value>
  </data>
  <data name="SingleIndexExpected" xml:space="preserve">
    <value>Single index expected</value>
  </data>
  <data name="StaticMethodDoestHaveThis" xml:space="preserve">
    <value>Static method does not have 'this'.</value>
  </data>
  <data name="TargetObjectIstAPointer" xml:space="preserve">
    <value>Target object is not a pointer</value>
  </data>
  <data name="TheObjectDoestHaveIndexerProperty" xml:space="preserve">
    <value>The object does not have an indexer property</value>
  </data>
  <data name="ThisIsNull" xml:space="preserve">
    <value>'this' is null</value>
  </data>
  <data name="ThreadIsGCUnsafePoint" xml:space="preserve">
    <value>Thread is in GC unsafe point</value>
  </data>
  <data name="Timeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="TypeExpected" xml:space="preserve">
    <value>Type {0} expected, {1} seen</value>
  </data>
  <data name="TypeExpectedSeen" xml:space="preserve">
    <value>Type expected. {0} seen.</value>
  </data>
  <data name="UnavailableInOptimizedCode" xml:space="preserve">
    <value>Unavailable in optimized code</value>
  </data>
  <data name="UnknownOperator" xml:space="preserve">
    <value>Unknown operator {0}</value>
  </data>
  <data name="ValueIsNoLongerValid" xml:space="preserve">
    <value>Value is no longer valid</value>
  </data>
  <data name="ValueIsNull" xml:space="preserve">
    <value>Value is null</value>
  </data>
</root>